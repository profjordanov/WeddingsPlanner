Controller: 
  
[HttpPost]
[SwaggerOperationFilter(typeof(UploadDocumentsOperationFilter))]
public async Task<IActionResult> Upload([FromForm] UploadDocumentRequest request) =>
    (await _documentsService.UploadDocument(CurrentCompanyContactId, request))
    .Match<IActionResult>(Ok, Error);
            
OperationFilters:

public class UploadDocumentsOperationFilter : IOperationFilter
    {
        public void Apply(Operation operation, OperationFilterContext context)
        {
            var fileParameter = operation
                .Parameters
                .FirstOrNone(p => string.Equals(p.Name, nameof(UploadDocumentRequest.File), System.StringComparison.OrdinalIgnoreCase));

            fileParameter.MatchSome(parameter =>
            {
                operation.Parameters.Remove(parameter);

                operation.Parameters.Add(new NonBodyParameter
                {
                    Name = "File",
                    In = "formData",
                    Description = "Upload File",
                    Required = true,
                    Type = "file"
                });

                operation.Consumes.Add("multipart/form-data");
            });

            var paygroupsParameter = operation
                .Parameters
                .FirstOrNone(p => string.Equals(p.Name, nameof(UploadDocumentRequest.Paygroups), StringComparison.Ordinal));

            paygroupsParameter.MatchSome(parameter =>
            {
                if (!(parameter is NonBodyParameter nonBodyParameter))
                    return;

                nonBodyParameter.CollectionFormat = string.Empty;
                nonBodyParameter.Extensions.Add("style", "form");
                nonBodyParameter.Extensions.Add("explode", "false");
            });
        }
    }


Model:
    public class UploadDocumentRequest
    {
        [Required]
        public IFormFile File { get; set; }
        
        [Required]
        [FromQuery]
        [ModelBinder(typeof(DelimitedArrayModelBinder))]
        public string[] Paygroups { get; set; }

        [Required]
        public string FileType { get; set; }
    }
    
    
CsvReportGenerator:

/// <summary>
	/// Generates CSV Report File.
	/// <see cref="CsvReport"/>
	/// </summary>
	public class CsvReportGenerator
	{
		//CONSTANTS
		private const char CommaSeparator = ',';

		/// <summary>
		/// Generates report file by a collection of objects and file name.
		/// If the collection is empty will return empty file.
		/// </summary>
		/// <returns>CSV Report struct.</returns>
		public CsvReport GenerateReport<T>(IEnumerable<T> records, string reportName)
		{
			var properties = typeof(T).GetProperties(); // all properties of current object
			var headers = properties.Select(p => p.Name); // the first row of the report will be object's properties names

			var bodyRows = records.Select(record => new { record, props = record.GetType().GetProperties() })
				.Select(metaRec =>
					metaRec.props.Select(prop => metaRec.record.GetType().GetProperty(prop.Name).GetValue(metaRec.record).ToString() ?? string.Empty))
				.Select(columns => string.Join(CommaSeparator, columns))
				.ToList();

			return PrepareReportFile(headers, bodyRows, reportName);
		}

		private static IEnumerable<string> GetAllRows(IEnumerable<string> titles, IEnumerable<string> values)
		{
			var headerRow = string.Join(CommaSeparator, titles);
			var allRows = new List<string>(values);
			allRows.Insert(0, headerRow);
			return allRows;
		}

		private static CsvReport PrepareReportFile(IEnumerable<string> titles, IEnumerable<string> values, string reportName)
		{
			var reportRows = GetAllRows(titles, values).ToList();
			var bytesData = UTF8.GetBytes(string.Join(NewLine, reportRows));
			return new CsvReport(reportRows, bytesData, reportName);
		}
	}
  
public class CsvReport
	{
		public CsvReport(IEnumerable<string> allRows, byte[] data, string fileName)
		{
			AllRows = allRows.ToList();
			Data = data;
			FileName = $"{fileName}.csv";
		}

		public IReadOnlyCollection<string> AllRows { get; }

		public byte[] Data { get; }

		public string FileName { get; }

	}
